package com.kc345ws.leetcode;
/*
* 给定一个数组，它的第 i 个元素是一支给定的股票在第 i 天的价格。

设计一个算法来计算你所能获取的最大利润。你最多可以完成 两笔 交易。

注意: 你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。

示例 1:

输入: [3,3,5,0,0,3,1,4]
输出: 6
解释: 在第 4 天（股票价格 = 0）的时候买入，在第 6 天（股票价格 = 3）的时候卖出，
这笔交易所能获得利润 = 3-0 = 3 。
     随后，在第 7 天（股票价格 = 1）的时候买入，在第 8 天 （股票价格 = 4）的时候卖出，
这笔交易所能获得利润 = 4-1 = 3 。
示例 2:

输入: [1,2,3,4,5]
输出: 4
解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出,
这笔交易所能获得利润 = 5-1 = 4 。  
     注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。  
     因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。
示例 3:

输入: [7,6,4,3,1]
输出: 0
解释: 在这个情况下, 没有交易完成, 所以最大利润为 0。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iii
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
* */
public class _0123买卖股票最佳时机3 {
    public int maxProfit(int[] prices) {
        if(prices.length == 0) return 0;
        int len = prices.length;
        int[][][] profit = new int[prices.length][2][3];//天数 是否持有 交易次数
        profit[0][1][0] = Integer.MIN_VALUE;//连续买入两次股票
        profit[0][1][1] = 0 - prices[0];
        profit[0][1][2] = Integer.MIN_VALUE;//非法持有股票
        profit[0][0][0] = Integer.MIN_VALUE;//连续两次卖出股票

        for(int i = 1 ; i < len ; i++){
            //购买次数在买入时-1
            //买入或保持
            profit[i][1][0] = Math.max(profit[i-1][1][0],profit[i-1][0][1]-prices[i]);
//            //持有股票且交易次数剩余0次，保持原有状态或买入交易次数-1
            profit[i][1][1] = Math.max(profit[i-1][1][1],0 - prices[i]);
            //持有股票且交易次数剩余1次，保持原有状态或买入交易次数-1
            //profit[i][1][2] = Integer.MIN_VALUE;//没购买股票却持有了股票
            //卖出或保持
            profit[i][0][0] = Math.max(profit[i-1][0][0],profit[i-1][1][0]+prices[i]);
//            //未持有股票且交易次数已用完，保持原有状态或卖出
            profit[i][0][1] = Math.max(profit[i-1][0][1],profit[i-1][1][1]+prices[i]);
            //未持有股票且交易次数剩余1次，保持原有状态或卖出
            //profit[i][0][2] = profit[i-1][0][2];
//            //未持有股票且交易次数剩余2次，说明还没买入过股票利润一直为0
        }
        return profit[len-1][0][0];//最后一天未持有股票且剩余交易次数为0利润最高
    }
}
/*
* 与第一题相比加了交易次数限制，只能同时进行一笔交易
* profti[0][0][2] = 0;//第一天未持有
* profit[0][1][1] = 0 - prices[0];//第一天持有，购买时交易次数-1
* profti[i][0][0]或profti[i][1][0] ;//交易次数为0无法再购买
* */
