package com.kc345ws.leetcode;
/*
*
给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。

设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。

注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。

示例 1:

输入: [7,1,5,3,6,4]
输出: 7
解释: 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出,
这笔交易所能获得利润 = 5-1 = 4 。
     随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出,
 这笔交易所能获得利润 = 6-3 = 3 。
示例 2:

输入: [1,2,3,4,5]
输出: 4
解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出,
这笔交易所能获得利润 = 5-1 = 4 。
     注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。
     因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。
示例 3:

输入: [7,6,4,3,1]
输出: 0
解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
* */
public class _0122买卖股票最佳时机2 {
    public int maxProfit(int[] prices) {
        if(prices.length == 0) return 0;
        int len = prices.length;
        int[][]profit = new int[len][2];
        profit[0][0] = 0;//第一天没有买股票利润为0
        profit[0][1] = 0 - prices[0];//第一天买了股票
        for (int i = 1 ; i < len ; i++){
            profit[i][0] = Math.max(profit[i-1][0],profit[i-1][1]+prices[i]);
            profit[i][1] = Math.max(profit[i-1][1] , profit[i-1][0]-prices[i]);
            //利润可以累加，且只能在卖出股票后才能再次购买
        }
        return profit[len-1][0];
    }
}
/*
* 与上一题相比可以无限次交易，说明在此过程中的利润可以累加
* 但最多只能同时进行一笔交易，在持有股票后必须卖出才能在此购买
* */
